// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ヘルスチェック
	// (GET /api/_healthz)
	GetApiHealthz(ctx echo.Context) error
	// usernameから複数のbook_idを取得。それぞれのbook_idから本の情報を取得
	// (GET /api/books)
	GetBooks(ctx echo.Context) error
	// 新たなbookを登録
	// (POST /api/books)
	PostBooks(ctx echo.Context) error
	// book_idの本を削除
	// (DELETE /api/books/{book_id})
	DeleteBook(ctx echo.Context, bookId BookId) error
	// book_idから本の情報を取得
	// (GET /api/books/{book_id})
	GetBook(ctx echo.Context, bookId BookId) error
	// already_readの変更を行う
	// (PUT /api/books/{book_id})
	PutBook(ctx echo.Context, bookId BookId, params PutBookParams) error
	// book_idのsummary_idのsummaryを全取得
	// (GET /api/summaries)
	GetSummaries(ctx echo.Context, params GetSummariesParams) error
	// book_idのsummaryを登録
	// (POST /api/summaries)
	PostSummaries(ctx echo.Context) error
	// summary_idのsummaryを削除
	// (DELETE /api/summaries/{summary_id})
	DeleteSummary(ctx echo.Context, summaryId SummaryId) error
	// summary_idのsummaryを取得
	// (GET /api/summaries/{summary_id})
	GetSummary(ctx echo.Context, summaryId SummaryId) error
	// summary_idのsummaryを修正
	// (PUT /api/summaries/{summary_id})
	PutSummary(ctx echo.Context, summaryId SummaryId) error
	// usernameのタグを全取得
	// (GET /api/tags)
	GetTags(ctx echo.Context) error
	// usernameのtagリストにtagを追加
	// (POST /api/tags)
	PostTags(ctx echo.Context) error
	// username, tag_idのtagを修正
	// (DELETE /api/tags/{tag_id})
	DeleteTag(ctx echo.Context, tagId TagId) error
	// username, tag_idのtagを取得
	// (GET /api/tags/{tag_id})
	GetTag(ctx echo.Context, tagId TagId) error
	// username, tag_idのtagを修正
	// (PUT /api/tags/{tag_id})
	PutTag(ctx echo.Context, tagId TagId) error
	// login
	// (POST /login)
	Login(ctx echo.Context) error
	// sign up
	// (POST /signup)
	Signup(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiHealthz converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHealthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiHealthz(ctx)
	return err
}

// GetBooks converts echo context to params.
func (w *ServerInterfaceWrapper) GetBooks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBooks(ctx)
	return err
}

// PostBooks converts echo context to params.
func (w *ServerInterfaceWrapper) PostBooks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBooks(ctx)
	return err
}

// DeleteBook converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "book_id" -------------
	var bookId BookId

	err = runtime.BindStyledParameterWithLocation("simple", false, "book_id", runtime.ParamLocationPath, ctx.Param("book_id"), &bookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter book_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBook(ctx, bookId)
	return err
}

// GetBook converts echo context to params.
func (w *ServerInterfaceWrapper) GetBook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "book_id" -------------
	var bookId BookId

	err = runtime.BindStyledParameterWithLocation("simple", false, "book_id", runtime.ParamLocationPath, ctx.Param("book_id"), &bookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter book_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBook(ctx, bookId)
	return err
}

// PutBook converts echo context to params.
func (w *ServerInterfaceWrapper) PutBook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "book_id" -------------
	var bookId BookId

	err = runtime.BindStyledParameterWithLocation("simple", false, "book_id", runtime.ParamLocationPath, ctx.Param("book_id"), &bookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter book_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutBookParams
	// ------------- Required query parameter "already_read" -------------

	err = runtime.BindQueryParameter("form", true, true, "already_read", ctx.QueryParams(), &params.AlreadyRead)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter already_read: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutBook(ctx, bookId, params)
	return err
}

// GetSummaries converts echo context to params.
func (w *ServerInterfaceWrapper) GetSummaries(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSummariesParams
	// ------------- Required query parameter "book_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "book_id", ctx.QueryParams(), &params.BookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter book_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSummaries(ctx, params)
	return err
}

// PostSummaries converts echo context to params.
func (w *ServerInterfaceWrapper) PostSummaries(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSummaries(ctx)
	return err
}

// DeleteSummary converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "summary_id" -------------
	var summaryId SummaryId

	err = runtime.BindStyledParameterWithLocation("simple", false, "summary_id", runtime.ParamLocationPath, ctx.Param("summary_id"), &summaryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter summary_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSummary(ctx, summaryId)
	return err
}

// GetSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "summary_id" -------------
	var summaryId SummaryId

	err = runtime.BindStyledParameterWithLocation("simple", false, "summary_id", runtime.ParamLocationPath, ctx.Param("summary_id"), &summaryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter summary_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSummary(ctx, summaryId)
	return err
}

// PutSummary converts echo context to params.
func (w *ServerInterfaceWrapper) PutSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "summary_id" -------------
	var summaryId SummaryId

	err = runtime.BindStyledParameterWithLocation("simple", false, "summary_id", runtime.ParamLocationPath, ctx.Param("summary_id"), &summaryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter summary_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSummary(ctx, summaryId)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// DeleteTag converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, ctx.Param("tag_id"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTag(ctx, tagId)
	return err
}

// GetTag converts echo context to params.
func (w *ServerInterfaceWrapper) GetTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, ctx.Param("tag_id"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTag(ctx, tagId)
	return err
}

// PutTag converts echo context to params.
func (w *ServerInterfaceWrapper) PutTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, ctx.Param("tag_id"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTag(ctx, tagId)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/_healthz", wrapper.GetApiHealthz)
	router.GET(baseURL+"/api/books", wrapper.GetBooks)
	router.POST(baseURL+"/api/books", wrapper.PostBooks)
	router.DELETE(baseURL+"/api/books/:book_id", wrapper.DeleteBook)
	router.GET(baseURL+"/api/books/:book_id", wrapper.GetBook)
	router.PUT(baseURL+"/api/books/:book_id", wrapper.PutBook)
	router.GET(baseURL+"/api/summaries", wrapper.GetSummaries)
	router.POST(baseURL+"/api/summaries", wrapper.PostSummaries)
	router.DELETE(baseURL+"/api/summaries/:summary_id", wrapper.DeleteSummary)
	router.GET(baseURL+"/api/summaries/:summary_id", wrapper.GetSummary)
	router.PUT(baseURL+"/api/summaries/:summary_id", wrapper.PutSummary)
	router.GET(baseURL+"/api/tags", wrapper.GetTags)
	router.POST(baseURL+"/api/tags", wrapper.PostTags)
	router.DELETE(baseURL+"/api/tags/:tag_id", wrapper.DeleteTag)
	router.GET(baseURL+"/api/tags/:tag_id", wrapper.GetTag)
	router.PUT(baseURL+"/api/tags/:tag_id", wrapper.PutTag)
	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/signup", wrapper.Signup)

}
